// CHECKSTYLE:OFF
/**
 * Source code generated by Fluent Builders Generator
 * Do not modify this file
 * See generator home page at: http://code.google.com/p/fluent-builders-generator-eclipse-plugin/
 */

package com.mastalerek.mytamer.builder;

import com.mastalerek.mytamer.entity.Contraindication;
import com.mastalerek.mytamer.entity.Diet;
import com.mastalerek.mytamer.entity.Discipline;
import com.mastalerek.mytamer.entity.Exercise;
import com.mastalerek.mytamer.entity.ExerciseSet;
import com.mastalerek.mytamer.entity.ExerciseSetExercise;
import com.mastalerek.mytamer.entity.ExerciseUnit;
import com.mastalerek.mytamer.entity.Goal;
import com.mastalerek.mytamer.entity.Group;
import com.mastalerek.mytamer.entity.Meal;
import com.mastalerek.mytamer.entity.MealNutritional;
import com.mastalerek.mytamer.entity.MealSet;
import com.mastalerek.mytamer.entity.MealSetMeals;
import com.mastalerek.mytamer.entity.Measurement;
import com.mastalerek.mytamer.entity.Nutritional;
import com.mastalerek.mytamer.entity.Progress;
import com.mastalerek.mytamer.entity.Rank;
import com.mastalerek.mytamer.entity.Setting;
import com.mastalerek.mytamer.entity.Student;
import com.mastalerek.mytamer.entity.StudentExercise;
import com.mastalerek.mytamer.entity.StudentGoal;
import com.mastalerek.mytamer.entity.StudentGoalInitialState;
import com.mastalerek.mytamer.entity.StudentMeasurement;
import com.mastalerek.mytamer.entity.StudentScore;
import com.mastalerek.mytamer.entity.Timesheet;
import com.mastalerek.mytamer.entity.TrainingPlan;
import com.mastalerek.mytamer.entity.TrainingPlanDiet;
import com.mastalerek.mytamer.entity.TrainingPlanExerciseSet;
import com.mastalerek.mytamer.entity.User;
import com.mastalerek.mytamer.entity.UserSetting;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class TrainingPlanBuilder extends TrainingPlanBuilderBase<TrainingPlanBuilder> {
	public static TrainingPlanBuilder trainingPlan() {
		return new TrainingPlanBuilder();
	}

	public TrainingPlanBuilder() {
		super(new TrainingPlan());
	}

	public TrainingPlan build() {
		return getInstance();
	}
}

class TrainingPlanBuilderBase<GeneratorT extends TrainingPlanBuilderBase<GeneratorT>> {
	private TrainingPlan instance;

	protected TrainingPlanBuilderBase(TrainingPlan aInstance) {
		instance = aInstance;
	}

	protected TrainingPlan getInstance() {
		return instance;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withId(Integer aValue) {
		instance.setId(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withName(String aValue) {
		instance.setName(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withDescription(String aValue) {
		instance.setDescription(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withExerciseSets(List<TrainingPlanExerciseSet> aValue) {
		instance.setExerciseSets(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedExerciseSet(TrainingPlanExerciseSet aValue) {
		if (instance.getExerciseSets() == null) {
			instance.setExerciseSets(new ArrayList<TrainingPlanExerciseSet>());
		}

		((ArrayList<TrainingPlanExerciseSet>) instance.getExerciseSets()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedExerciseSetTrainingPlanExerciseSetBuilder withAddedExerciseSet() {
		TrainingPlanExerciseSet obj = new TrainingPlanExerciseSet();

		withAddedExerciseSet(obj);

		return new AddedExerciseSetTrainingPlanExerciseSetBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withTrainingPlanDiets(List<TrainingPlanDiet> aValue) {
		instance.setTrainingPlanDiets(aValue);

		return (GeneratorT) this;
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withAddedTrainingPlanDiet(TrainingPlanDiet aValue) {
		if (instance.getTrainingPlanDiets() == null) {
			instance.setTrainingPlanDiets(new ArrayList<TrainingPlanDiet>());
		}

		((ArrayList<TrainingPlanDiet>) instance.getTrainingPlanDiets()).add(aValue);

		return (GeneratorT) this;
	}

	public AddedTrainingPlanDietTrainingPlanDietBuilder withAddedTrainingPlanDiet() {
		TrainingPlanDiet obj = new TrainingPlanDiet();

		withAddedTrainingPlanDiet(obj);

		return new AddedTrainingPlanDietTrainingPlanDietBuilder(obj);
	}

	@SuppressWarnings("unchecked")
	public GeneratorT withUser(User aValue) {
		instance.setUser(aValue);

		return (GeneratorT) this;
	}

	public UserUserBuilder withUser() {
		User obj = new User();

		withUser(obj);

		return new UserUserBuilder(obj);
	}

	public class AddedExerciseSetTrainingPlanExerciseSetBuilder
			extends TrainingPlanExerciseSetBuilderBase<AddedExerciseSetTrainingPlanExerciseSetBuilder> {
		public AddedExerciseSetTrainingPlanExerciseSetBuilder(TrainingPlanExerciseSet aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endExerciseSet() {
			return (GeneratorT) TrainingPlanBuilderBase.this;
		}
	}

	public class AddedTrainingPlanDietTrainingPlanDietBuilder
			extends TrainingPlanDietBuilderBase<AddedTrainingPlanDietTrainingPlanDietBuilder> {
		public AddedTrainingPlanDietTrainingPlanDietBuilder(TrainingPlanDiet aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endTrainingPlanDiet() {
			return (GeneratorT) TrainingPlanBuilderBase.this;
		}
	}

	public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
		public UserUserBuilder(User aInstance) {
			super(aInstance);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT endUser() {
			return (GeneratorT) TrainingPlanBuilderBase.this;
		}
	}

	public static class TrainingPlanExerciseSetBuilderBase<GeneratorT extends TrainingPlanExerciseSetBuilderBase<GeneratorT>> {
		private TrainingPlanExerciseSet instance;

		protected TrainingPlanExerciseSetBuilderBase(TrainingPlanExerciseSet aInstance) {
			instance = aInstance;
		}

		protected TrainingPlanExerciseSet getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTrainingPlan(TrainingPlan aValue) {
			instance.setTrainingPlan(aValue);

			return (GeneratorT) this;
		}

		public TrainingPlanTrainingPlanBuilder withTrainingPlan() {
			TrainingPlan obj = new TrainingPlan();

			withTrainingPlan(obj);

			return new TrainingPlanTrainingPlanBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExerciseSet(ExerciseSet aValue) {
			instance.setExerciseSet(aValue);

			return (GeneratorT) this;
		}

		public ExerciseSetExerciseSetBuilder withExerciseSet() {
			ExerciseSet obj = new ExerciseSet();

			withExerciseSet(obj);

			return new ExerciseSetExerciseSetBuilder(obj);
		}

		public class TrainingPlanTrainingPlanBuilder extends TrainingPlanBuilderBase<TrainingPlanTrainingPlanBuilder> {
			public TrainingPlanTrainingPlanBuilder(TrainingPlan aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endTrainingPlan() {
				return (GeneratorT) TrainingPlanExerciseSetBuilderBase.this;
			}
		}

		public class ExerciseSetExerciseSetBuilder extends ExerciseSetBuilderBase<ExerciseSetExerciseSetBuilder> {
			public ExerciseSetExerciseSetBuilder(ExerciseSet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExerciseSet() {
				return (GeneratorT) TrainingPlanExerciseSetBuilderBase.this;
			}
		}
	}

	public static class TrainingPlanDietBuilderBase<GeneratorT extends TrainingPlanDietBuilderBase<GeneratorT>> {
		private TrainingPlanDiet instance;

		protected TrainingPlanDietBuilderBase(TrainingPlanDiet aInstance) {
			instance = aInstance;
		}

		protected TrainingPlanDiet getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTrainingPlan(TrainingPlan aValue) {
			instance.setTrainingPlan(aValue);

			return (GeneratorT) this;
		}

		public TrainingPlanTrainingPlanBuilder withTrainingPlan() {
			TrainingPlan obj = new TrainingPlan();

			withTrainingPlan(obj);

			return new TrainingPlanTrainingPlanBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDiet(Diet aValue) {
			instance.setDiet(aValue);

			return (GeneratorT) this;
		}

		public DietDietBuilder withDiet() {
			Diet obj = new Diet();

			withDiet(obj);

			return new DietDietBuilder(obj);
		}

		public class TrainingPlanTrainingPlanBuilder extends TrainingPlanBuilderBase<TrainingPlanTrainingPlanBuilder> {
			public TrainingPlanTrainingPlanBuilder(TrainingPlan aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endTrainingPlan() {
				return (GeneratorT) TrainingPlanDietBuilderBase.this;
			}
		}

		public class DietDietBuilder extends DietBuilderBase<DietDietBuilder> {
			public DietDietBuilder(Diet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endDiet() {
				return (GeneratorT) TrainingPlanDietBuilderBase.this;
			}
		}
	}

	public static class ExerciseSetBuilderBase<GeneratorT extends ExerciseSetBuilderBase<GeneratorT>> {
		private ExerciseSet instance;

		protected ExerciseSetBuilderBase(ExerciseSet aInstance) {
			instance = aInstance;
		}

		protected ExerciseSet getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercises(List<ExerciseSetExercise> aValue) {
			instance.setExercises(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedExercis(ExerciseSetExercise aValue) {
			if (instance.getExercises() == null) {
				instance.setExercises(new ArrayList<ExerciseSetExercise>());
			}

			((ArrayList<ExerciseSetExercise>) instance.getExercises()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedExercisExerciseSetExerciseBuilder withAddedExercis() {
			ExerciseSetExercise obj = new ExerciseSetExercise();

			withAddedExercis(obj);

			return new AddedExercisExerciseSetExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTime(Integer aValue) {
			instance.setTime(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		public class AddedExercisExerciseSetExerciseBuilder
				extends ExerciseSetExerciseBuilderBase<AddedExercisExerciseSetExerciseBuilder> {
			public AddedExercisExerciseSetExerciseBuilder(ExerciseSetExercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercis() {
				return (GeneratorT) ExerciseSetBuilderBase.this;
			}
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) ExerciseSetBuilderBase.this;
			}
		}
	}

	public static class ExerciseSetExerciseBuilderBase<GeneratorT extends ExerciseSetExerciseBuilderBase<GeneratorT>> {
		private ExerciseSetExercise instance;

		protected ExerciseSetExerciseBuilderBase(ExerciseSetExercise aInstance) {
			instance = aInstance;
		}

		protected ExerciseSetExercise getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercise(Exercise aValue) {
			instance.setExercise(aValue);

			return (GeneratorT) this;
		}

		public ExerciseExerciseBuilder withExercise() {
			Exercise obj = new Exercise();

			withExercise(obj);

			return new ExerciseExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExerciseSet(ExerciseSet aValue) {
			instance.setExerciseSet(aValue);

			return (GeneratorT) this;
		}

		public ExerciseSetExerciseSetBuilder withExerciseSet() {
			ExerciseSet obj = new ExerciseSet();

			withExerciseSet(obj);

			return new ExerciseSetExerciseSetBuilder(obj);
		}

		public class ExerciseExerciseBuilder extends ExerciseBuilderBase<ExerciseExerciseBuilder> {
			public ExerciseExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercise() {
				return (GeneratorT) ExerciseSetExerciseBuilderBase.this;
			}
		}

		public class ExerciseSetExerciseSetBuilder extends ExerciseSetBuilderBase<ExerciseSetExerciseSetBuilder> {
			public ExerciseSetExerciseSetBuilder(ExerciseSet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExerciseSet() {
				return (GeneratorT) ExerciseSetExerciseBuilderBase.this;
			}
		}
	}

	public static class DietBuilderBase<GeneratorT extends DietBuilderBase<GeneratorT>> {
		private Diet instance;

		protected DietBuilderBase(Diet aInstance) {
			instance = aInstance;
		}

		protected Diet getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withActive(Integer aValue) {
			instance.setActive(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) DietBuilderBase.this;
			}
		}
	}

	public static class UserBuilderBase<GeneratorT extends UserBuilderBase<GeneratorT>> {
		private User instance;

		protected UserBuilderBase(User aInstance) {
			instance = aInstance;
		}

		protected User getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUsername(String aValue) {
			instance.setUsername(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withEmail(String aValue) {
			instance.setEmail(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withPassword(String aValue) {
			instance.setPassword(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withGroups(List<Group> aValue) {
			instance.setGroups(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedGroup(Group aValue) {
			if (instance.getGroups() == null) {
				instance.setGroups(new ArrayList<Group>());
			}

			((ArrayList<Group>) instance.getGroups()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedGroupGroupBuilder withAddedGroup() {
			Group obj = new Group();

			withAddedGroup(obj);

			return new AddedGroupGroupBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUserSettings(List<UserSetting> aValue) {
			instance.setUserSettings(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedUserSetting(UserSetting aValue) {
			if (instance.getUserSettings() == null) {
				instance.setUserSettings(new ArrayList<UserSetting>());
			}

			((ArrayList<UserSetting>) instance.getUserSettings()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedUserSettingUserSettingBuilder withAddedUserSetting() {
			UserSetting obj = new UserSetting();

			withAddedUserSetting(obj);

			return new AddedUserSettingUserSettingBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDiets(List<Diet> aValue) {
			instance.setDiets(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedDiet(Diet aValue) {
			if (instance.getDiets() == null) {
				instance.setDiets(new ArrayList<Diet>());
			}

			((ArrayList<Diet>) instance.getDiets()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedDietDietBuilder withAddedDiet() {
			Diet obj = new Diet();

			withAddedDiet(obj);

			return new AddedDietDietBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMeals(List<Meal> aValue) {
			instance.setMeals(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedMeal(Meal aValue) {
			if (instance.getMeals() == null) {
				instance.setMeals(new ArrayList<Meal>());
			}

			((ArrayList<Meal>) instance.getMeals()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedMealMealBuilder withAddedMeal() {
			Meal obj = new Meal();

			withAddedMeal(obj);

			return new AddedMealMealBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMealSets(List<MealSet> aValue) {
			instance.setMealSets(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedMealSet(MealSet aValue) {
			if (instance.getMealSets() == null) {
				instance.setMealSets(new ArrayList<MealSet>());
			}

			((ArrayList<MealSet>) instance.getMealSets()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedMealSetMealSetBuilder withAddedMealSet() {
			MealSet obj = new MealSet();

			withAddedMealSet(obj);

			return new AddedMealSetMealSetBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercises(List<Exercise> aValue) {
			instance.setExercises(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedExercis(Exercise aValue) {
			if (instance.getExercises() == null) {
				instance.setExercises(new ArrayList<Exercise>());
			}

			((ArrayList<Exercise>) instance.getExercises()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedExercisExerciseBuilder withAddedExercis() {
			Exercise obj = new Exercise();

			withAddedExercis(obj);

			return new AddedExercisExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExerciseSets(List<ExerciseSet> aValue) {
			instance.setExerciseSets(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedExerciseSet(ExerciseSet aValue) {
			if (instance.getExerciseSets() == null) {
				instance.setExerciseSets(new ArrayList<ExerciseSet>());
			}

			((ArrayList<ExerciseSet>) instance.getExerciseSets()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedExerciseSetExerciseSetBuilder withAddedExerciseSet() {
			ExerciseSet obj = new ExerciseSet();

			withAddedExerciseSet(obj);

			return new AddedExerciseSetExerciseSetBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTrainingPlans(List<TrainingPlan> aValue) {
			instance.setTrainingPlans(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedTrainingPlan(TrainingPlan aValue) {
			if (instance.getTrainingPlans() == null) {
				instance.setTrainingPlans(new ArrayList<TrainingPlan>());
			}

			((ArrayList<TrainingPlan>) instance.getTrainingPlans()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedTrainingPlanTrainingPlanBuilder withAddedTrainingPlan() {
			TrainingPlan obj = new TrainingPlan();

			withAddedTrainingPlan(obj);

			return new AddedTrainingPlanTrainingPlanBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudents(List<Student> aValue) {
			instance.setStudents(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudent(Student aValue) {
			if (instance.getStudents() == null) {
				instance.setStudents(new ArrayList<Student>());
			}

			((ArrayList<Student>) instance.getStudents()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentStudentBuilder withAddedStudent() {
			Student obj = new Student();

			withAddedStudent(obj);

			return new AddedStudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withRole(String aValue) {
			instance.setRole(aValue);

			return (GeneratorT) this;
		}

		public class AddedGroupGroupBuilder extends GroupBuilderBase<AddedGroupGroupBuilder> {
			public AddedGroupGroupBuilder(Group aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endGroup() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedUserSettingUserSettingBuilder
				extends UserSettingBuilderBase<AddedUserSettingUserSettingBuilder> {
			public AddedUserSettingUserSettingBuilder(UserSetting aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUserSetting() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedDietDietBuilder extends DietBuilderBase<AddedDietDietBuilder> {
			public AddedDietDietBuilder(Diet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endDiet() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedMealMealBuilder extends MealBuilderBase<AddedMealMealBuilder> {
			public AddedMealMealBuilder(Meal aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMeal() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedMealSetMealSetBuilder extends MealSetBuilderBase<AddedMealSetMealSetBuilder> {
			public AddedMealSetMealSetBuilder(MealSet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMealSet() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedExercisExerciseBuilder extends ExerciseBuilderBase<AddedExercisExerciseBuilder> {
			public AddedExercisExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercis() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedExerciseSetExerciseSetBuilder
				extends ExerciseSetBuilderBase<AddedExerciseSetExerciseSetBuilder> {
			public AddedExerciseSetExerciseSetBuilder(ExerciseSet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExerciseSet() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedTrainingPlanTrainingPlanBuilder
				extends TrainingPlanBuilderBase<AddedTrainingPlanTrainingPlanBuilder> {
			public AddedTrainingPlanTrainingPlanBuilder(TrainingPlan aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endTrainingPlan() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class AddedStudentStudentBuilder extends StudentBuilderBase<AddedStudentStudentBuilder> {
			public AddedStudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) UserBuilderBase.this;
			}
		}
	}

	public static class MealSetBuilderBase<GeneratorT extends MealSetBuilderBase<GeneratorT>> {
		private MealSet instance;

		protected MealSetBuilderBase(MealSet aInstance) {
			instance = aInstance;
		}

		protected MealSet getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMeals(List<MealSetMeals> aValue) {
			instance.setMeals(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedMeal(MealSetMeals aValue) {
			if (instance.getMeals() == null) {
				instance.setMeals(new ArrayList<MealSetMeals>());
			}

			((ArrayList<MealSetMeals>) instance.getMeals()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedMealMealSetMealsBuilder withAddedMeal() {
			MealSetMeals obj = new MealSetMeals();

			withAddedMeal(obj);

			return new AddedMealMealSetMealsBuilder(obj);
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) MealSetBuilderBase.this;
			}
		}

		public class AddedMealMealSetMealsBuilder extends MealSetMealsBuilderBase<AddedMealMealSetMealsBuilder> {
			public AddedMealMealSetMealsBuilder(MealSetMeals aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMeal() {
				return (GeneratorT) MealSetBuilderBase.this;
			}
		}
	}

	public static class MealSetMealsBuilderBase<GeneratorT extends MealSetMealsBuilderBase<GeneratorT>> {
		private MealSetMeals instance;

		protected MealSetMealsBuilderBase(MealSetMeals aInstance) {
			instance = aInstance;
		}

		protected MealSetMeals getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMeal(Meal aValue) {
			instance.setMeal(aValue);

			return (GeneratorT) this;
		}

		public MealMealBuilder withMeal() {
			Meal obj = new Meal();

			withMeal(obj);

			return new MealMealBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMealSet(MealSet aValue) {
			instance.setMealSet(aValue);

			return (GeneratorT) this;
		}

		public MealSetMealSetBuilder withMealSet() {
			MealSet obj = new MealSet();

			withMealSet(obj);

			return new MealSetMealSetBuilder(obj);
		}

		public class MealMealBuilder extends MealBuilderBase<MealMealBuilder> {
			public MealMealBuilder(Meal aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMeal() {
				return (GeneratorT) MealSetMealsBuilderBase.this;
			}
		}

		public class MealSetMealSetBuilder extends MealSetBuilderBase<MealSetMealSetBuilder> {
			public MealSetMealSetBuilder(MealSet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMealSet() {
				return (GeneratorT) MealSetMealsBuilderBase.this;
			}
		}
	}

	public static class GroupBuilderBase<GeneratorT extends GroupBuilderBase<GeneratorT>> {
		private Group instance;

		protected GroupBuilderBase(Group aInstance) {
			instance = aInstance;
		}

		protected Group getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudents(List<Student> aValue) {
			instance.setStudents(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudent(Student aValue) {
			if (instance.getStudents() == null) {
				instance.setStudents(new ArrayList<Student>());
			}

			((ArrayList<Student>) instance.getStudents()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentStudentBuilder withAddedStudent() {
			Student obj = new Student();

			withAddedStudent(obj);

			return new AddedStudentStudentBuilder(obj);
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) GroupBuilderBase.this;
			}
		}

		public class AddedStudentStudentBuilder extends StudentBuilderBase<AddedStudentStudentBuilder> {
			public AddedStudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) GroupBuilderBase.this;
			}
		}
	}

	public static class StudentBuilderBase<GeneratorT extends StudentBuilderBase<GeneratorT>> {
		private Student instance;

		protected StudentBuilderBase(Student aInstance) {
			instance = aInstance;
		}

		protected Student getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withGroup(Group aValue) {
			instance.setGroup(aValue);

			return (GeneratorT) this;
		}

		public GroupGroupBuilder withGroup() {
			Group obj = new Group();

			withGroup(obj);

			return new GroupGroupBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withRank(Rank aValue) {
			instance.setRank(aValue);

			return (GeneratorT) this;
		}

		public RankRankBuilder withRank() {
			Rank obj = new Rank();

			withRank(obj);

			return new RankRankBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withFirstName(String aValue) {
			instance.setFirstName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withLastName(String aValue) {
			instance.setLastName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withBirthdate(Date aValue) {
			instance.setBirthdate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withPhoto(String aValue) {
			instance.setPhoto(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentMeasurements(List<StudentMeasurement> aValue) {
			instance.setStudentMeasurements(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentMeasurement(StudentMeasurement aValue) {
			if (instance.getStudentMeasurements() == null) {
				instance.setStudentMeasurements(new ArrayList<StudentMeasurement>());
			}

			((ArrayList<StudentMeasurement>) instance.getStudentMeasurements()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentMeasurementStudentMeasurementBuilder withAddedStudentMeasurement() {
			StudentMeasurement obj = new StudentMeasurement();

			withAddedStudentMeasurement(obj);

			return new AddedStudentMeasurementStudentMeasurementBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentExercises(List<StudentExercise> aValue) {
			instance.setStudentExercises(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentExercis(StudentExercise aValue) {
			if (instance.getStudentExercises() == null) {
				instance.setStudentExercises(new ArrayList<StudentExercise>());
			}

			((ArrayList<StudentExercise>) instance.getStudentExercises()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentExercisStudentExerciseBuilder withAddedStudentExercis() {
			StudentExercise obj = new StudentExercise();

			withAddedStudentExercis(obj);

			return new AddedStudentExercisStudentExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentGoals(List<StudentGoal> aValue) {
			instance.setStudentGoals(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentGoal(StudentGoal aValue) {
			if (instance.getStudentGoals() == null) {
				instance.setStudentGoals(new ArrayList<StudentGoal>());
			}

			((ArrayList<StudentGoal>) instance.getStudentGoals()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentGoalStudentGoalBuilder withAddedStudentGoal() {
			StudentGoal obj = new StudentGoal();

			withAddedStudentGoal(obj);

			return new AddedStudentGoalStudentGoalBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentScores(List<StudentScore> aValue) {
			instance.setStudentScores(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentScore(StudentScore aValue) {
			if (instance.getStudentScores() == null) {
				instance.setStudentScores(new ArrayList<StudentScore>());
			}

			((ArrayList<StudentScore>) instance.getStudentScores()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentScoreStudentScoreBuilder withAddedStudentScore() {
			StudentScore obj = new StudentScore();

			withAddedStudentScore(obj);

			return new AddedStudentScoreStudentScoreBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentGoalInitialStates(List<StudentGoalInitialState> aValue) {
			instance.setStudentGoalInitialStates(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentGoalInitialState(StudentGoalInitialState aValue) {
			if (instance.getStudentGoalInitialStates() == null) {
				instance.setStudentGoalInitialStates(new ArrayList<StudentGoalInitialState>());
			}

			((ArrayList<StudentGoalInitialState>) instance.getStudentGoalInitialStates()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentGoalInitialStateStudentGoalInitialStateBuilder withAddedStudentGoalInitialState() {
			StudentGoalInitialState obj = new StudentGoalInitialState();

			withAddedStudentGoalInitialState(obj);

			return new AddedStudentGoalInitialStateStudentGoalInitialStateBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentProgresses(List<Progress> aValue) {
			instance.setStudentProgresses(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentProgress(Progress aValue) {
			if (instance.getStudentProgresses() == null) {
				instance.setStudentProgresses(new ArrayList<Progress>());
			}

			((ArrayList<Progress>) instance.getStudentProgresses()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentProgressProgressBuilder withAddedStudentProgress() {
			Progress obj = new Progress();

			withAddedStudentProgress(obj);

			return new AddedStudentProgressProgressBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentContraindications(List<Contraindication> aValue) {
			instance.setStudentContraindications(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentContraindication(Contraindication aValue) {
			if (instance.getStudentContraindications() == null) {
				instance.setStudentContraindications(new ArrayList<Contraindication>());
			}

			((ArrayList<Contraindication>) instance.getStudentContraindications()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentContraindicationContraindicationBuilder withAddedStudentContraindication() {
			Contraindication obj = new Contraindication();

			withAddedStudentContraindication(obj);

			return new AddedStudentContraindicationContraindicationBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTrainer(User aValue) {
			instance.setTrainer(aValue);

			return (GeneratorT) this;
		}

		public TrainerUserBuilder withTrainer() {
			User obj = new User();

			withTrainer(obj);

			return new TrainerUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withTimesheets(List<Timesheet> aValue) {
			instance.setTimesheets(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedTimesheet(Timesheet aValue) {
			if (instance.getTimesheets() == null) {
				instance.setTimesheets(new ArrayList<Timesheet>());
			}

			((ArrayList<Timesheet>) instance.getTimesheets()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedTimesheetTimesheetBuilder withAddedTimesheet() {
			Timesheet obj = new Timesheet();

			withAddedTimesheet(obj);

			return new AddedTimesheetTimesheetBuilder(obj);
		}

		public class GroupGroupBuilder extends GroupBuilderBase<GroupGroupBuilder> {
			public GroupGroupBuilder(Group aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endGroup() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class RankRankBuilder extends RankBuilderBase<RankRankBuilder> {
			public RankRankBuilder(Rank aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endRank() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentMeasurementStudentMeasurementBuilder
				extends StudentMeasurementBuilderBase<AddedStudentMeasurementStudentMeasurementBuilder> {
			public AddedStudentMeasurementStudentMeasurementBuilder(StudentMeasurement aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentMeasurement() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentExercisStudentExerciseBuilder
				extends StudentExerciseBuilderBase<AddedStudentExercisStudentExerciseBuilder> {
			public AddedStudentExercisStudentExerciseBuilder(StudentExercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentExercis() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentGoalStudentGoalBuilder
				extends StudentGoalBuilderBase<AddedStudentGoalStudentGoalBuilder> {
			public AddedStudentGoalStudentGoalBuilder(StudentGoal aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentGoal() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentScoreStudentScoreBuilder
				extends StudentScoreBuilderBase<AddedStudentScoreStudentScoreBuilder> {
			public AddedStudentScoreStudentScoreBuilder(StudentScore aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentScore() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentGoalInitialStateStudentGoalInitialStateBuilder
				extends StudentGoalInitialStateBuilderBase<AddedStudentGoalInitialStateStudentGoalInitialStateBuilder> {
			public AddedStudentGoalInitialStateStudentGoalInitialStateBuilder(StudentGoalInitialState aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentGoalInitialState() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentProgressProgressBuilder
				extends ProgressBuilderBase<AddedStudentProgressProgressBuilder> {
			public AddedStudentProgressProgressBuilder(Progress aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentProgress() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedStudentContraindicationContraindicationBuilder
				extends ContraindicationBuilderBase<AddedStudentContraindicationContraindicationBuilder> {
			public AddedStudentContraindicationContraindicationBuilder(Contraindication aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentContraindication() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class TrainerUserBuilder extends UserBuilderBase<TrainerUserBuilder> {
			public TrainerUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endTrainer() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}

		public class AddedTimesheetTimesheetBuilder extends TimesheetBuilderBase<AddedTimesheetTimesheetBuilder> {
			public AddedTimesheetTimesheetBuilder(Timesheet aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endTimesheet() {
				return (GeneratorT) StudentBuilderBase.this;
			}
		}
	}

	public static class StudentGoalBuilderBase<GeneratorT extends StudentGoalBuilderBase<GeneratorT>> {
		private StudentGoal instance;

		protected StudentGoalBuilderBase(StudentGoal aInstance) {
			instance = aInstance;
		}

		protected StudentGoal getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withGoal(Goal aValue) {
			instance.setGoal(aValue);

			return (GeneratorT) this;
		}

		public GoalGoalBuilder withGoal() {
			Goal obj = new Goal();

			withGoal(obj);

			return new GoalGoalBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAccomplished(Date aValue) {
			instance.setAccomplished(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercise(Exercise aValue) {
			instance.setExercise(aValue);

			return (GeneratorT) this;
		}

		public ExerciseExerciseBuilder withExercise() {
			Exercise obj = new Exercise();

			withExercise(obj);

			return new ExerciseExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withValue(Double aValue) {
			instance.setValue(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(ExerciseUnit aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}

		public UnitExerciseUnitBuilder withUnit() {
			ExerciseUnit obj = new ExerciseUnit();

			withUnit(obj);

			return new UnitExerciseUnitBuilder(obj);
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) StudentGoalBuilderBase.this;
			}
		}

		public class GoalGoalBuilder extends GoalBuilderBase<GoalGoalBuilder> {
			public GoalGoalBuilder(Goal aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endGoal() {
				return (GeneratorT) StudentGoalBuilderBase.this;
			}
		}

		public class ExerciseExerciseBuilder extends ExerciseBuilderBase<ExerciseExerciseBuilder> {
			public ExerciseExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercise() {
				return (GeneratorT) StudentGoalBuilderBase.this;
			}
		}

		public class UnitExerciseUnitBuilder extends ExerciseUnitBuilderBase<UnitExerciseUnitBuilder> {
			public UnitExerciseUnitBuilder(ExerciseUnit aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUnit() {
				return (GeneratorT) StudentGoalBuilderBase.this;
			}
		}
	}

	public static class UserSettingBuilderBase<GeneratorT extends UserSettingBuilderBase<GeneratorT>> {
		private UserSetting instance;

		protected UserSettingBuilderBase(UserSetting aInstance) {
			instance = aInstance;
		}

		protected UserSetting getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withSetting(Setting aValue) {
			instance.setSetting(aValue);

			return (GeneratorT) this;
		}

		public SettingSettingBuilder withSetting() {
			Setting obj = new Setting();

			withSetting(obj);

			return new SettingSettingBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withValue(Integer aValue) {
			instance.setValue(aValue);

			return (GeneratorT) this;
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) UserSettingBuilderBase.this;
			}
		}

		public class SettingSettingBuilder extends SettingBuilderBase<SettingSettingBuilder> {
			public SettingSettingBuilder(Setting aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endSetting() {
				return (GeneratorT) UserSettingBuilderBase.this;
			}
		}
	}

	public static class ContraindicationBuilderBase<GeneratorT extends ContraindicationBuilderBase<GeneratorT>> {
		private Contraindication instance;

		protected ContraindicationBuilderBase(Contraindication aInstance) {
			instance = aInstance;
		}

		protected Contraindication getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withText(String aValue) {
			instance.setText(aValue);

			return (GeneratorT) this;
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) ContraindicationBuilderBase.this;
			}
		}
	}

	public static class MealBuilderBase<GeneratorT extends MealBuilderBase<GeneratorT>> {
		private Meal instance;

		protected MealBuilderBase(Meal aInstance) {
			instance = aInstance;
		}

		protected Meal getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withIngridients(String aValue) {
			instance.setIngridients(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withPreparing(String aValue) {
			instance.setPreparing(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withIconName(String aValue) {
			instance.setIconName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMealNutritionals(List<MealNutritional> aValue) {
			instance.setMealNutritionals(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedMealNutritional(MealNutritional aValue) {
			if (instance.getMealNutritionals() == null) {
				instance.setMealNutritionals(new ArrayList<MealNutritional>());
			}

			((ArrayList<MealNutritional>) instance.getMealNutritionals()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedMealNutritionalMealNutritionalBuilder withAddedMealNutritional() {
			MealNutritional obj = new MealNutritional();

			withAddedMealNutritional(obj);

			return new AddedMealNutritionalMealNutritionalBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		public class AddedMealNutritionalMealNutritionalBuilder
				extends MealNutritionalBuilderBase<AddedMealNutritionalMealNutritionalBuilder> {
			public AddedMealNutritionalMealNutritionalBuilder(MealNutritional aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMealNutritional() {
				return (GeneratorT) MealBuilderBase.this;
			}
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) MealBuilderBase.this;
			}
		}
	}

	public static class GoalBuilderBase<GeneratorT extends GoalBuilderBase<GeneratorT>> {
		private Goal instance;

		protected GoalBuilderBase(Goal aInstance) {
			instance = aInstance;
		}

		protected Goal getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}
	}

	public static class RankBuilderBase<GeneratorT extends RankBuilderBase<GeneratorT>> {
		private Rank instance;

		protected RankBuilderBase(Rank aInstance) {
			instance = aInstance;
		}

		protected Rank getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}
	}

	public static class StudentScoreBuilderBase<GeneratorT extends StudentScoreBuilderBase<GeneratorT>> {
		private StudentScore instance;

		protected StudentScoreBuilderBase(StudentScore aInstance) {
			instance = aInstance;
		}

		protected StudentScore getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercise(Exercise aValue) {
			instance.setExercise(aValue);

			return (GeneratorT) this;
		}

		public ExerciseExerciseBuilder withExercise() {
			Exercise obj = new Exercise();

			withExercise(obj);

			return new ExerciseExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withValue(Double aValue) {
			instance.setValue(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDate(Date aValue) {
			instance.setDate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(ExerciseUnit aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}

		public UnitExerciseUnitBuilder withUnit() {
			ExerciseUnit obj = new ExerciseUnit();

			withUnit(obj);

			return new UnitExerciseUnitBuilder(obj);
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) StudentScoreBuilderBase.this;
			}
		}

		public class ExerciseExerciseBuilder extends ExerciseBuilderBase<ExerciseExerciseBuilder> {
			public ExerciseExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercise() {
				return (GeneratorT) StudentScoreBuilderBase.this;
			}
		}

		public class UnitExerciseUnitBuilder extends ExerciseUnitBuilderBase<UnitExerciseUnitBuilder> {
			public UnitExerciseUnitBuilder(ExerciseUnit aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUnit() {
				return (GeneratorT) StudentScoreBuilderBase.this;
			}
		}
	}

	public static class StudentGoalInitialStateBuilderBase<GeneratorT extends StudentGoalInitialStateBuilderBase<GeneratorT>> {
		private StudentGoalInitialState instance;

		protected StudentGoalInitialStateBuilderBase(StudentGoalInitialState aInstance) {
			instance = aInstance;
		}

		protected StudentGoalInitialState getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercise(Exercise aValue) {
			instance.setExercise(aValue);

			return (GeneratorT) this;
		}

		public ExerciseExerciseBuilder withExercise() {
			Exercise obj = new Exercise();

			withExercise(obj);

			return new ExerciseExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withFirstState(Double aValue) {
			instance.setFirstState(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(ExerciseUnit aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}

		public UnitExerciseUnitBuilder withUnit() {
			ExerciseUnit obj = new ExerciseUnit();

			withUnit(obj);

			return new UnitExerciseUnitBuilder(obj);
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) StudentGoalInitialStateBuilderBase.this;
			}
		}

		public class ExerciseExerciseBuilder extends ExerciseBuilderBase<ExerciseExerciseBuilder> {
			public ExerciseExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercise() {
				return (GeneratorT) StudentGoalInitialStateBuilderBase.this;
			}
		}

		public class UnitExerciseUnitBuilder extends ExerciseUnitBuilderBase<UnitExerciseUnitBuilder> {
			public UnitExerciseUnitBuilder(ExerciseUnit aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUnit() {
				return (GeneratorT) StudentGoalInitialStateBuilderBase.this;
			}
		}
	}

	public static class SettingBuilderBase<GeneratorT extends SettingBuilderBase<GeneratorT>> {
		private Setting instance;

		protected SettingBuilderBase(Setting aInstance) {
			instance = aInstance;
		}

		protected Setting getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}
	}

	public static class ExerciseUnitBuilderBase<GeneratorT extends ExerciseUnitBuilderBase<GeneratorT>> {
		private ExerciseUnit instance;

		protected ExerciseUnitBuilderBase(ExerciseUnit aInstance) {
			instance = aInstance;
		}

		protected ExerciseUnit getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withKey(String aValue) {
			instance.setKey(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(String aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}
	}

	public static class StudentMeasurementBuilderBase<GeneratorT extends StudentMeasurementBuilderBase<GeneratorT>> {
		private StudentMeasurement instance;

		protected StudentMeasurementBuilderBase(StudentMeasurement aInstance) {
			instance = aInstance;
		}

		protected StudentMeasurement getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMeasurement(Measurement aValue) {
			instance.setMeasurement(aValue);

			return (GeneratorT) this;
		}

		public MeasurementMeasurementBuilder withMeasurement() {
			Measurement obj = new Measurement();

			withMeasurement(obj);

			return new MeasurementMeasurementBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withValue(Double aValue) {
			instance.setValue(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDate(java.sql.Date aValue) {
			instance.setDate(aValue);

			return (GeneratorT) this;
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) StudentMeasurementBuilderBase.this;
			}
		}

		public class MeasurementMeasurementBuilder extends MeasurementBuilderBase<MeasurementMeasurementBuilder> {
			public MeasurementMeasurementBuilder(Measurement aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endMeasurement() {
				return (GeneratorT) StudentMeasurementBuilderBase.this;
			}
		}
	}

	public static class MeasurementBuilderBase<GeneratorT extends MeasurementBuilderBase<GeneratorT>> {
		private Measurement instance;

		protected MeasurementBuilderBase(Measurement aInstance) {
			instance = aInstance;
		}

		protected Measurement getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(String aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}
	}

	public static class TimesheetBuilderBase<GeneratorT extends TimesheetBuilderBase<GeneratorT>> {
		private Timesheet instance;

		protected TimesheetBuilderBase(Timesheet aInstance) {
			instance = aInstance;
		}

		protected Timesheet getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDate(Date aValue) {
			instance.setDate(aValue);

			return (GeneratorT) this;
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) TimesheetBuilderBase.this;
			}
		}
	}

	public static class MealNutritionalBuilderBase<GeneratorT extends MealNutritionalBuilderBase<GeneratorT>> {
		private MealNutritional instance;

		protected MealNutritionalBuilderBase(MealNutritional aInstance) {
			instance = aInstance;
		}

		protected MealNutritional getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withMealId(Integer aValue) {
			instance.setMealId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withNutritional(Nutritional aValue) {
			instance.setNutritional(aValue);

			return (GeneratorT) this;
		}

		public NutritionalNutritionalBuilder withNutritional() {
			Nutritional obj = new Nutritional();

			withNutritional(obj);

			return new NutritionalNutritionalBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withValue(Double aValue) {
			instance.setValue(aValue);

			return (GeneratorT) this;
		}

		public class NutritionalNutritionalBuilder extends NutritionalBuilderBase<NutritionalNutritionalBuilder> {
			public NutritionalNutritionalBuilder(Nutritional aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endNutritional() {
				return (GeneratorT) MealNutritionalBuilderBase.this;
			}
		}
	}

	public static class NutritionalBuilderBase<GeneratorT extends NutritionalBuilderBase<GeneratorT>> {
		private Nutritional instance;

		protected NutritionalBuilderBase(Nutritional aInstance) {
			instance = aInstance;
		}

		protected Nutritional getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(String aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}
	}

	public static class ExerciseBuilderBase<GeneratorT extends ExerciseBuilderBase<GeneratorT>> {
		private Exercise instance;

		protected ExerciseBuilderBase(Exercise aInstance) {
			instance = aInstance;
		}

		protected Exercise getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDiscipline(Discipline aValue) {
			instance.setDiscipline(aValue);

			return (GeneratorT) this;
		}

		public DisciplineDisciplineBuilder withDiscipline() {
			Discipline obj = new Discipline();

			withDiscipline(obj);

			return new DisciplineDisciplineBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUnit(ExerciseUnit aValue) {
			instance.setUnit(aValue);

			return (GeneratorT) this;
		}

		public UnitExerciseUnitBuilder withUnit() {
			ExerciseUnit obj = new ExerciseUnit();

			withUnit(obj);

			return new UnitExerciseUnitBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withSecondUnit(ExerciseUnit aValue) {
			instance.setSecondUnit(aValue);

			return (GeneratorT) this;
		}

		public SecondUnitExerciseUnitBuilder withSecondUnit() {
			ExerciseUnit obj = new ExerciseUnit();

			withSecondUnit(obj);

			return new SecondUnitExerciseUnitBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withIconName(String aValue) {
			instance.setIconName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentExercises(List<StudentExercise> aValue) {
			instance.setStudentExercises(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentExercis(StudentExercise aValue) {
			if (instance.getStudentExercises() == null) {
				instance.setStudentExercises(new ArrayList<StudentExercise>());
			}

			((ArrayList<StudentExercise>) instance.getStudentExercises()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentExercisStudentExerciseBuilder withAddedStudentExercis() {
			StudentExercise obj = new StudentExercise();

			withAddedStudentExercis(obj);

			return new AddedStudentExercisStudentExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withUser(User aValue) {
			instance.setUser(aValue);

			return (GeneratorT) this;
		}

		public UserUserBuilder withUser() {
			User obj = new User();

			withUser(obj);

			return new UserUserBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudentScores(List<StudentScore> aValue) {
			instance.setStudentScores(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withAddedStudentScore(StudentScore aValue) {
			if (instance.getStudentScores() == null) {
				instance.setStudentScores(new ArrayList<StudentScore>());
			}

			((ArrayList<StudentScore>) instance.getStudentScores()).add(aValue);

			return (GeneratorT) this;
		}

		public AddedStudentScoreStudentScoreBuilder withAddedStudentScore() {
			StudentScore obj = new StudentScore();

			withAddedStudentScore(obj);

			return new AddedStudentScoreStudentScoreBuilder(obj);
		}

		public class DisciplineDisciplineBuilder extends DisciplineBuilderBase<DisciplineDisciplineBuilder> {
			public DisciplineDisciplineBuilder(Discipline aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endDiscipline() {
				return (GeneratorT) ExerciseBuilderBase.this;
			}
		}

		public class UnitExerciseUnitBuilder extends ExerciseUnitBuilderBase<UnitExerciseUnitBuilder> {
			public UnitExerciseUnitBuilder(ExerciseUnit aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUnit() {
				return (GeneratorT) ExerciseBuilderBase.this;
			}
		}

		public class SecondUnitExerciseUnitBuilder extends ExerciseUnitBuilderBase<SecondUnitExerciseUnitBuilder> {
			public SecondUnitExerciseUnitBuilder(ExerciseUnit aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endSecondUnit() {
				return (GeneratorT) ExerciseBuilderBase.this;
			}
		}

		public class AddedStudentExercisStudentExerciseBuilder
				extends StudentExerciseBuilderBase<AddedStudentExercisStudentExerciseBuilder> {
			public AddedStudentExercisStudentExerciseBuilder(StudentExercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentExercis() {
				return (GeneratorT) ExerciseBuilderBase.this;
			}
		}

		public class UserUserBuilder extends UserBuilderBase<UserUserBuilder> {
			public UserUserBuilder(User aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endUser() {
				return (GeneratorT) ExerciseBuilderBase.this;
			}
		}

		public class AddedStudentScoreStudentScoreBuilder
				extends StudentScoreBuilderBase<AddedStudentScoreStudentScoreBuilder> {
			public AddedStudentScoreStudentScoreBuilder(StudentScore aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudentScore() {
				return (GeneratorT) ExerciseBuilderBase.this;
			}
		}
	}

	public static class DisciplineBuilderBase<GeneratorT extends DisciplineBuilderBase<GeneratorT>> {
		private Discipline instance;

		protected DisciplineBuilderBase(Discipline aInstance) {
			instance = aInstance;
		}

		protected Discipline getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withName(String aValue) {
			instance.setName(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDescription(String aValue) {
			instance.setDescription(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withIconName(String aValue) {
			instance.setIconName(aValue);

			return (GeneratorT) this;
		}
	}

	public static class StudentExerciseBuilderBase<GeneratorT extends StudentExerciseBuilderBase<GeneratorT>> {
		private StudentExercise instance;

		protected StudentExerciseBuilderBase(StudentExercise aInstance) {
			instance = aInstance;
		}

		protected StudentExercise getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercise(Exercise aValue) {
			instance.setExercise(aValue);

			return (GeneratorT) this;
		}

		public ExerciseExerciseBuilder withExercise() {
			Exercise obj = new Exercise();

			withExercise(obj);

			return new ExerciseExerciseBuilder(obj);
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) StudentExerciseBuilderBase.this;
			}
		}

		public class ExerciseExerciseBuilder extends ExerciseBuilderBase<ExerciseExerciseBuilder> {
			public ExerciseExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercise() {
				return (GeneratorT) StudentExerciseBuilderBase.this;
			}
		}
	}

	public static class ProgressBuilderBase<GeneratorT extends ProgressBuilderBase<GeneratorT>> {
		private Progress instance;

		protected ProgressBuilderBase(Progress aInstance) {
			instance = aInstance;
		}

		protected Progress getInstance() {
			return instance;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withId(Integer aValue) {
			instance.setId(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withStudent(Student aValue) {
			instance.setStudent(aValue);

			return (GeneratorT) this;
		}

		public StudentStudentBuilder withStudent() {
			Student obj = new Student();

			withStudent(obj);

			return new StudentStudentBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withExercise(Exercise aValue) {
			instance.setExercise(aValue);

			return (GeneratorT) this;
		}

		public ExerciseExerciseBuilder withExercise() {
			Exercise obj = new Exercise();

			withExercise(obj);

			return new ExerciseExerciseBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withGoal(StudentGoal aValue) {
			instance.setGoal(aValue);

			return (GeneratorT) this;
		}

		public GoalStudentGoalBuilder withGoal() {
			StudentGoal obj = new StudentGoal();

			withGoal(obj);

			return new GoalStudentGoalBuilder(obj);
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withDate(Date aValue) {
			instance.setDate(aValue);

			return (GeneratorT) this;
		}

		@SuppressWarnings("unchecked")
		public GeneratorT withScore(Double aValue) {
			instance.setScore(aValue);

			return (GeneratorT) this;
		}

		public class StudentStudentBuilder extends StudentBuilderBase<StudentStudentBuilder> {
			public StudentStudentBuilder(Student aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endStudent() {
				return (GeneratorT) ProgressBuilderBase.this;
			}
		}

		public class ExerciseExerciseBuilder extends ExerciseBuilderBase<ExerciseExerciseBuilder> {
			public ExerciseExerciseBuilder(Exercise aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endExercise() {
				return (GeneratorT) ProgressBuilderBase.this;
			}
		}

		public class GoalStudentGoalBuilder extends StudentGoalBuilderBase<GoalStudentGoalBuilder> {
			public GoalStudentGoalBuilder(StudentGoal aInstance) {
				super(aInstance);
			}

			@SuppressWarnings("unchecked")
			public GeneratorT endGoal() {
				return (GeneratorT) ProgressBuilderBase.this;
			}
		}
	}
}
